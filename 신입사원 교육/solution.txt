class MinHeap{
    constructor(){
        this.heap = [null];
    }
    push(val){
        this.heap.push(val);
        let cur = this.heap.length-1;
        let p = cur/2>>0;
        while(p !== 0 && this.heap[cur] < this.heap[p]){
            [this.heap[cur], this.heap[p]] = [this.heap[p], this.heap[cur]];
            cur = p;
            p = cur/2>>0;
        }
    }
    pop(){
        if(this.heap.length == 1) return;
        if(this.heap.length == 2) return this.heap.pop();
        
        let val = this.heap[1];
        this.heap[1] = this.heap.pop();
        
        let cur = 1;
        let left = 2
        let right = 3;
        while((this.heap[left] != undefined && this.heap[cur] > this.heap[left])
              || this.heap[right] != undefined && this.heap[cur] > this.heap[right]){
            if(this.heap[left] == undefined){
                [this.heap[right],this.heap[cur]] = [this.heap[cur], this.heap[right]];
            }
            else if(this.heap[right] == undefined){
                [this.heap[left], this.heap[cur]] = [this.heap[cur], this.heap[left]];
            }
            else if(this.heap[left] >= this.heap[right]){
                [this.heap[right],this.heap[cur]] = [this.heap[cur], this.heap[right]];
                cur = right;
            }
            else if(this.heap[right] > this.heap[left]){
                [this.heap[left], this.heap[cur]] = [this.heap[cur], this.heap[left]];
                cur = left;
            }
            left = cur*2;
            right = cur*2+1;
        }
        
        return val;
    }
}
function solution(ability, number) {
    var answer = 0;
    const heap = new MinHeap();
    const n = ability.length;
    for(let val of ability){
        heap.push(val);
    }
    for(let i=0; i<number; i++){
        let val1 = heap.pop();
        let val2 = heap.pop();
        let sum = val1 + val2;
        heap.push(sum);
        heap.push(sum);
    }
    for(let i=0; i<n; i++){
        answer+= heap.pop();
    }
    return answer;
}