function solution(n, m, hole) {
    const visit = new Array(n).fill(-1).map(()=>new Array(m).fill(-1).map(()=>new Array(2).fill(-1)));
    const holePos = new Array(n).fill(-1).map(()=>new Array(m).fill(-1));
    for(let [x,y] of hole){
        holePos[x-1][y-1] = 1;
    }
    const dx = [-1,0,1,0];
    const dy = [0,-1,0,1];
    
    const search = (x,y) =>{
        const q = [[x,y,0,0]];
        visit[x][y][0] = 1;
        while(q.length){
            const [cx,cy,cnt,k] = q.shift();
            if(cx==n-1 && cy==m-1) {
                return cnt;
            }
            for(let i=0; i<4; i++){
                if(k==0){
                    let nx2 = cx + dx[i]*2;
                    let ny2 = cy + dy[i]*2;
                    if(nx2>=0 && ny2>=0 && nx2<n && ny2<m && holePos[nx2][ny2] != 1 && visit[nx2][ny2][k] != 1){
                        q.push([nx2,ny2,cnt+1,k+1]);
                        visit[nx2][ny2][k+1]= 1;
                    } 
                }
                let nx = cx + dx[i];
                let ny = cy + dy[i];
                if(nx>=0 && ny>=0 && nx<n && ny<m && holePos[nx][ny] != 1 && visit[nx][ny][k] != 1){
                    q.push([nx,ny,cnt+1,k]);
                    visit[nx][ny][k] = 1;
                }
            }
        }
    }
    let res = search(0,0);
    if(res == undefined) res = -1;
    return res;
}