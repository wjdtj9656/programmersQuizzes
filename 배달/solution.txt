class MinHeap{
    constructor(){
        this.heap = [null];
    }
    push(val){
        this.heap.push(val);
        let cur = this.heap.length-1;
        let p = cur/2>>0;
        while(p!=0 && this.heap[cur][0] < this.heap[p][0]){
              [this.heap[cur],this.heap[p]] = [this.heap[p],this.heap[cur]];
            cur = p;
            p = cur/2>>0;
        }
    }
    pop(){
        if(this.heap.length ==1) return;
        if(this.heap.length == 2) return this.heap.pop();
        let val = this.heap[1];
        this.heap[1] = this.heap.pop();
        
        let cur = 1;
        let left = 2;
        let right = 3;
        while((this.heap[left] && this.heap[left] < this.heap[cur])||(this.heap[right] && this.heap[right] < this.heap[cur])){
            if(this.heap[left] === undefined){
                [this.heap[right],this.heap[cur]] = [this.heap[cur],this.heap[right]];
            }
            else if(this.heap[right] === undefined){
                [this.heap[left],this.heap[cur]] = [this.heap[cur],this.heap[left]];
            }
            else if(this.heap[right][0] >= this.heap[left][0]){
                [this.heap[left],this.heap[cur]] = [this.heap[cur],this.heap[left]];
                cur = left;
            }
            else if(this.heap[right][0] < this.heap[left][0]){
                [this.heap[right],this.heap[cur]] = [this.heap[cur],this.heap[right]];
                cur = right;
            }
            left = cur*2;
            right = cur*2+1;
        }
        return val;
    }
}
function solution(N, road, K) {
    var answer = 0;
    const distance = new Array(N).fill(Infinity);
    const graph = {};
    for(let [from,to,dis] of road){
        if(!graph[from]){
            graph[from] = [];
        }
        if(!graph[to]){
            graph[to] = [];
        }
        graph[from].push([to,dis]);
        graph[to].push([from,dis]);
    }
    distance[0] = 0;
    const q = new MinHeap();
    q.push([0,0]);
    while(q.heap.length>1){
        const [curNode,curDis] = q.pop();
        if(distance[curNode] < curDis) continue;
        if(graph[curNode+1])
        for(let [to,dis] of graph[curNode+1]){
            to -=1;
            if(distance[to] > curDis + dis){
                distance[to] = curDis + dis;
                q.push([to,distance[to]]);
            }
        }
    }
    return distance.filter((v)=>v<=K).length;
}