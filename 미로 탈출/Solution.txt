import java.util.*;
class Solution {
    static int dx[] = {-1,0,1,0};
    static int dy[] = {0,-1,0,1};
    static int row,col;
    
    public int solution(String[] maps) {
        int answer = 0;
        int startPos[] = new int[2];
        row = maps.length;
        col = maps[0].length();
        
        //시작 지점 찾기.
        for1:
        for(int i=0; i<row; i++){
            for(int j=0; j<col; j++){
               if(maps[i].charAt(j) == 'S'){
                   startPos[0] = i;
                   startPos[1] = j;
                   break for1;
               } 
            }
        }
        
        boolean visit[][] = new boolean[row][col];
        int firstStep[] = bfs(maps,visit,startPos[0],startPos[1],'L');
        if(firstStep[2] == -1) return -1;
        
        //두 번째 방문하기전에 visit 초기화
        visit = new boolean[row][col];
        int secStep[] = bfs(maps,visit,firstStep[0],firstStep[1],'E');
        if(secStep[2] == -1) return -1;
        
        answer = firstStep[2] + secStep[2];
        return answer;
    }
    public int[] bfs(String[] maps, boolean[][] visit, int x, int y, Character goal){
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{x,y,0});
        visit[x][y] = true;
        while(!q.isEmpty()){
            int pos[] = q.poll();
            if(maps[pos[0]].charAt(pos[1]) == goal) return new int[]{pos[0], pos[1], pos[2]};
            for(int i=0; i<4; i++){
                int nx = pos[0] + dx[i];
                int ny = pos[1] + dy[i];
                if(nx<0 || ny<0 || nx>=row || ny>=col) continue;
                if(visit[nx][ny]) continue;
                if(maps[nx].charAt(ny) == 'X') continue;
                visit[nx][ny] = true;
                q.add(new int[]{nx,ny,pos[2]+1});
            }
        }
        return new int[]{-1,-1,-1};
    }
}