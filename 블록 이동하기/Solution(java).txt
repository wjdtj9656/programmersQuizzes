import java.util.*;
class Robot{
    int [][] pos = new int[2][2];
    int cnt = 0;
    public Robot(int x1, int y1, int x2, int y2, int cnt){
        this.pos[0][0] = x1;
        this.pos[0][1] = y1;
        this.pos[1][0] = x2;
        this.pos[1][1] = y2;
        this.cnt = cnt;
    }
}
class Solution {
    public int solution(int[][] board) {
        int answer = 0;
        return bfs(board);
    }
    public boolean check(int x, int y,int [][]board){
        if(x<0 || y<0 || x>=board.length || y>=board.length) return false;
        return true;
    }
    public int bfs(int[][] board){
        Queue<Robot> q = new LinkedList<Robot>();
        HashSet<String> set = new HashSet<>();
        q.add(new Robot(0,0,0,1,0));
        while(!q.isEmpty()){
            Robot now = q.poll();
            // Collections.sort(now);
            int x1 = 0;
            int y1 = 0;
            int x2 = 0;
            int y2 = 0;
            if(now.pos[0][0] == now.pos[1][0]){
                if(now.pos[0][1] < now.pos[1][1]){
                    x1 = now.pos[0][0];
                    y1 = now.pos[0][1];
                    x2 = now.pos[1][0];
                    y2 = now.pos[1][1];
                }
                else{
                    x2 = now.pos[0][0];
                    y2 = now.pos[0][1];
                    x1 = now.pos[1][0];
                    y1 = now.pos[1][1];
                }
            }
            else{
                if(now.pos[0][0] < now.pos[1][0]){
                    x1 = now.pos[0][0];
                    y1 = now.pos[0][1];
                    x2 = now.pos[1][0];
                    y2 = now.pos[1][1];
                }
                else{
                    x2 = now.pos[0][0];
                    y2 = now.pos[0][1];
                    x1 = now.pos[1][0];
                    y1 = now.pos[1][1];
                }
            }
            if(!check(x1,y1,board)) continue;
            if(!check(x2,y2,board)) continue;
            if(board[x1][y1] == 1 || board[x2][y2] == 1) continue;
            if((x1 == board.length-1 && y1 == board.length-1) || (x2 == board.length-1 && y2 == board.length-1)) return now.cnt;
            if(set.contains(x1+"0"+y1+"0"+x2+"0"+y2)) continue;
            set.add(x1+"0"+y1+"0"+x2+"0"+y2);
            if(y1>0 && y2>0) q.add(new Robot(x1,y1-1,x2,y2-1,now.cnt+1));
            if(x1>0 && x2>0) q.add(new Robot(x1-1,y1,x2-1,y2,now.cnt+1));
            if(y1<board.length-1 && y2<board.length-1)q.add(new Robot(x1,y1+1,x2,y2+1,now.cnt+1));
            if(x1<board.length-1 && x2<board.length-1) q.add(new Robot(x1+1,y1,x2+1,y2,now.cnt+1));
            //가로 모양
            if(x1 == x2){
               if(check(x1-1,y1,board) && check(x2-1,y2,board) && board[x1-1][y1] == 0 && board[x2-1][y2] == 0){
                   q.add(new Robot(x1,y1,x2-1,y2-1,now.cnt+1));
                   q.add(new Robot(x1-1,y1+1,x2,y2,now.cnt+1));
               }
                if(check(x1+1,y1,board) && check(x2+1,y2,board) &&board[x1+1][y1] == 0 && board[x2+1][y2] == 0){
                    q.add(new Robot(x1,y1,x2+1,y2-1,now.cnt+1));
                    q.add(new Robot(x1+1,y1+1,x2,y2,now.cnt+1));
                }
            }
            //세로모양
            if(y1 == y2){
                if(check(x1,y1-1,board) && check(x2,y2-1,board) &&board[x1][y1-1] == 0 && board[x2][y2-1] == 0){
                    q.add(new Robot(x1,y1,x2-1,y2-1,now.cnt+1));
                    q.add(new Robot(x1+1,y1-1,x2,y2,now.cnt+1));
                }
                if(check(x1,y1+1,board) && check(x2,y2+1,board) &&board[x1][y1+1] == 0 && board[x2][y2+1] == 0){
                    q.add(new Robot(x1,y1,x2-1,y2+1,now.cnt+1));
                    q.add(new Robot(x1+1,y1+1,x2,y2,now.cnt+1));
                }
            }
            
        }
        return 0;
    }
}